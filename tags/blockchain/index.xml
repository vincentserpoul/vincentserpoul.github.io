<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blockchain on VS tech corner</title>
    <link>https://vincentserpoul.github.io/tags/blockchain/</link>
    <description>Recent content in Blockchain on VS tech corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 21 Feb 2018 12:20:00 +0800</lastBuildDate>
    
	<atom:link href="https://vincentserpoul.github.io/tags/blockchain/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Landscape of the decentralized insurance</title>
      <link>https://vincentserpoul.github.io/post/decentralized-insurance/</link>
      <pubDate>Wed, 21 Feb 2018 12:20:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/decentralized-insurance/</guid>
      <description> Listing current actors  Etherisc Aigang Byteball BitPark Tides PolicyPal ixledger Dynamis Rainvow  </description>
    </item>
    
    <item>
      <title>Ethereum react dapps</title>
      <link>https://vincentserpoul.github.io/post/ethereum-react-dapps/</link>
      <pubDate>Thu, 27 Oct 2016 13:34:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-react-dapps/</guid>
      <description>I finished my first dapp with (react-boilerplate)[https://github.com/mxstbr/] this week and here are the few things I learnt. I won&amp;rsquo;t get into the redux, redux-saga details, I let you play with the amazing boilerplate.
Interacting with constant functions Let&amp;rsquo;s use the typical balanceOf function of the EIP20 contracts:
function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; }  Here are the sagas (redux-sagas) I used to interact:
import { take, call, put, cancel, select, fork } from &#39;redux-saga/effects&#39;; import { BALANCE_OF_GET, } from &#39;.</description>
    </item>
    
    <item>
      <title>Ethereum contracts and Golang</title>
      <link>https://vincentserpoul.github.io/post/binding-ethereum-golang/</link>
      <pubDate>Mon, 10 Oct 2016 12:54:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/binding-ethereum-golang/</guid>
      <description>The contract contract Trigger { function () { throw; } address owner; function Trigger() { owner = msg.sender; } event TriggerEvt(address _sender, uint _trigger); function trigger(uint _trigger) { TriggerEvt(msg.sender, _trigger); } function getOwner() constant returns (address) { return owner; } }  This is a very simple contract that we will take as an example.
Getting the right tools for binding A good starting point is this wiki.
You will need to follow the install procedure of go-ethereum.</description>
    </item>
    
    <item>
      <title>Blockchain week in Shanghai!</title>
      <link>https://vincentserpoul.github.io/post/ethereum-solidity/</link>
      <pubDate>Fri, 16 Sep 2016 13:44:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-solidity/</guid>
      <description>I participated to the devcon2 and blockchain summit last week. Here is my summary!</description>
    </item>
    
    <item>
      <title>Interacting with an Ethereum smart contract</title>
      <link>https://vincentserpoul.github.io/post/ethereum-interacting-with-contracts/</link>
      <pubDate>Wed, 03 Aug 2016 20:00:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-interacting-with-contracts/</guid>
      <description>Check the address of the current deployed contract Remember when you mined your contract, it told your its address. Now, reuse it!
eth.getCode(&amp;quot;0x5f3425ccedeae0eb36521c4cf93ec6544dbad9bd&amp;quot;)  Test the contract with a simple interaction get the latest web3-light.min.js js from https://github.com/ethereum/web3.js/releases and simply copy the dist/web3-light.min.js into the same folder as the following HTML file.
then, use this html to interact with your contract on the local node:
&amp;lt;!doctype&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.</description>
    </item>
    
    <item>
      <title>Ethereum first smart contract</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-contract/</link>
      <pubDate>Wed, 03 Aug 2016 13:00:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-contract/</guid>
      <description>Launch your geth (or testrpc) private instance ./geth \ --identity &amp;quot;gethTest&amp;quot; \ --rpc --rpcport &amp;quot;9012&amp;quot; \ --rpccorsdomain &amp;quot;YOUR_TEST_DOMAIN_APP_RUN_FROM&amp;quot; \ --datadir &amp;quot;./testChain&amp;quot; \ --port &amp;quot;30303&amp;quot; \ --nodiscover \ --rpcapi &amp;quot;db,eth,net,web3&amp;quot; \ --networkid 1999 \ --dev console  Within the console, compile your contract check this tutorial: https://www.ethereum.org/greeter
I had an issue when I followed the contract tutorial, my contract would not be mined after I was trying to deploy it.</description>
    </item>
    
    <item>
      <title>Ethereum dev environment</title>
      <link>https://vincentserpoul.github.io/post/ethereum-dev-environment/</link>
      <pubDate>Mon, 01 Aug 2016 08:27:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-dev-environment/</guid>
      <description>Part 1 - Setup your ethereum node There are many ways you can setup a node to dev an Ethereum dapp. You can use the live network: not advisable obviously for cost and speed reasons. You can use the test network: not advisable for speed reasons. You can use a testchain set up with Geth: easy but a bit tedious as you need to mine. You can the ethereum testrpc: easiest!</description>
    </item>
    
  </channel>
</rss>