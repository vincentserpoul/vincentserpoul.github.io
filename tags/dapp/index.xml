<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dapp on VS tech corner</title>
    <link>https://vincentserpoul.github.io/tags/dapp/</link>
    <description>Recent content in dapp on VS tech corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Aug 2016 12:00:27 +0800</lastBuildDate>
    
	<atom:link href="https://vincentserpoul.github.io/tags/dapp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ethereum first dapp - part 3</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-3/</link>
      <pubDate>Fri, 12 Aug 2016 12:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-3/</guid>
      <description>setting up a light wallet In order to have a setup close to what the DAPP would be, we will use (metamask) [http://www.metamask.io] as a light wallet (there are other choices).
Metamask allows you to connect to a custom node.
We will then connect to our node, http://localhost:9012 If everthing is fine, metamasks should indicate it&amp;rsquo;s connected.
Then, we can import the metamask account to our local node by simply specifying the datadir we have setup the node data.</description>
    </item>
    
    <item>
      <title>Ethereum first dapp - part 2</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-2/</link>
      <pubDate>Wed, 10 Aug 2016 15:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-2/</guid>
      <description>Frontend Prepare your folder for your dapp I will be using https://github.com/mxstbr/react-boilerplate as it&amp;rsquo;s quite nice and I&amp;rsquo;ve been playing with React for a bit now.
I will not go into the details of setting this up, it&amp;rsquo;s a totally different topic. If you are not familiar with it, it&amp;rsquo;s probably a waste of time for you to read.
Example web3 component with React This boilerplate uses immutable, redux and redux-sagas in order to deal with data.</description>
    </item>
    
    <item>
      <title>Ethereum first dapp - part 1</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-1/</link>
      <pubDate>Mon, 08 Aug 2016 15:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-1/</guid>
      <description>Contracts Prepare your folder for your dapp mkdir dapp  inside this folder, we&amp;rsquo;ll create one folder for truffle, one for geth.
cd dapp mkdir truffle geth  inside the geth folder, simply put the customGenesis block you can find in the ethereum-dev-environment blog post.
We are going to use two Ethereum clients, one for tests and devs, testrpc and one for a more real interaction, geth.
Let&amp;rsquo;s install truffle and testrpc</description>
    </item>
    
    <item>
      <title>Interacting with an Ethereum smart contract</title>
      <link>https://vincentserpoul.github.io/post/ethereum-interacting-with-contracts/</link>
      <pubDate>Wed, 03 Aug 2016 20:00:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-interacting-with-contracts/</guid>
      <description>Check the address of the current deployed contract Remember when you mined your contract, it told your its address. Now, reuse it!
eth.getCode(&amp;quot;0x5f3425ccedeae0eb36521c4cf93ec6544dbad9bd&amp;quot;)  Test the contract with a simple interaction get the latest web3-light.min.js js from https://github.com/ethereum/web3.js/releases and simply copy the dist/web3-light.min.js into the same folder as the following HTML file.
then, use this html to interact with your contract on the local node:
&amp;lt;!doctype&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.</description>
    </item>
    
  </channel>
</rss>