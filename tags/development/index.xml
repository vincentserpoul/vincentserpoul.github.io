<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on VS tech corner</title>
    <link>https://vincentserpoul.github.io/tags/development/</link>
    <description>Recent content in development on VS tech corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Aug 2016 12:00:27 +0800</lastBuildDate><atom:link href="https://vincentserpoul.github.io/tags/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ethereum first dapp - part 3</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-3/</link>
      <pubDate>Fri, 12 Aug 2016 12:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-3/</guid>
      <description>setting up a light wallet In order to have a setup close to what the DAPP would be, we will use (metamask) [http://www.metamask.io] as a light wallet (there are other choices).
Metamask allows you to connect to a custom node.
We will then connect to our node, http://localhost:9012 If everthing is fine, metamasks should indicate it&amp;rsquo;s connected.
Then, we can import the metamask account to our local node by simply specifying the datadir we have setup the node data.</description>
    </item>
    
    <item>
      <title>Ethereum first dapp - part 2</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-2/</link>
      <pubDate>Wed, 10 Aug 2016 15:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-2/</guid>
      <description>Frontend Prepare your folder for your dapp I will be using https://github.com/mxstbr/react-boilerplate as it&amp;rsquo;s quite nice and I&amp;rsquo;ve been playing with React for a bit now.
I will not go into the details of setting this up, it&amp;rsquo;s a totally different topic. If you are not familiar with it, it&amp;rsquo;s probably a waste of time for you to read.
Example web3 component with React This boilerplate uses immutable, redux and redux-sagas in order to deal with data.</description>
    </item>
    
    <item>
      <title>Ethereum first dapp - part 1</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-1/</link>
      <pubDate>Mon, 08 Aug 2016 15:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-1/</guid>
      <description>Contracts Prepare your folder for your dapp mkdir dapp inside this folder, we&amp;rsquo;ll create one folder for truffle, one for geth.
cd dapp mkdir truffle geth inside the geth folder, simply put the customGenesis block you can find in the ethereum-dev-environment blog post.
We are going to use two Ethereum clients, one for tests and devs, testrpc and one for a more real interaction, geth.
Let&amp;rsquo;s install truffle and testrpc</description>
    </item>
    
    <item>
      <title>react setup with essential tools</title>
      <link>https://vincentserpoul.github.io/post/react-dev-env-setup/</link>
      <pubDate>Mon, 11 Apr 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/react-dev-env-setup/</guid>
      <description>Working with ES6-7 In order to work with ECMAScript 2015 and even with future implementations of ES, you can use Babel.
Babel is a transpiler, it will convert your ES6-7 to plain ES5 javascript that most browsers (&amp;gt;ie9 most probably) will understand.
To install babel
npm install -g babel Then within your javascript project, you can create a .babelrc file with the following content:
{ &amp;#34;presets&amp;#34;: [&amp;#34;es2015&amp;#34;, &amp;#34;stage-0&amp;#34;, &amp;#34;react&amp;#34;] } React and its surrounding libraries After starting using React, I realized it was vey good and was surrounded with libraries which makes it even better: redux, immutable, react-router&amp;hellip;</description>
    </item>
    
    <item>
      <title>javascript dev environment setup</title>
      <link>https://vincentserpoul.github.io/post/javascript-dev-env-setup/</link>
      <pubDate>Thu, 10 Mar 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/javascript-dev-env-setup/</guid>
      <description>NodeJS Go to the nodejs website and install nodejs latest stable version:
https://nodejs.org/en/download/stable/
NPM Go to the npm website and follow the instructions
https://docs.npmjs.com/getting-started/installing-node
Install nodejs essential packages npm install -g eslint webpack webpack-dev-server babel-eslint serve
Install sublime-text essential plugins With the help of the package manager, in sublime-text, install the following packages: babel, Sublime-Linter-Contrib-eslint, React ES6 snippets
Make sure your linter is working In sublime text, open the console (view &amp;gt; show console) and check if there is any error message.</description>
    </item>
    
    <item>
      <title>golang dev environment setup</title>
      <link>https://vincentserpoul.github.io/post/golang-dev-env-setup/</link>
      <pubDate>Sat, 20 Feb 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/golang-dev-env-setup/</guid>
      <description>Golang environment install golang
http://www.wolfe.id.au/2015/03/05/using-sublime-text-for-go-development/
Within sublimetext, from the package manager, install gosublime, install gooracle.
install go/tools:
go get -u golang.org/x/tools/cmd/goimports go get -u golang.org/x/tools/cmd/vet go get -u golang.org/x/tools/cmd/oracle go get -u golang.org/x/tools/cmd/godoc install gometalinter (https://github.com/alecthomas/gometalinter)
install interfacer (https://github.com/mvdan/interfacer/)
install gosimple (https://github.com/dominikh/go-simple)
install gocov (https://github.com/axw/gocov)
Here is the package settings I use for gosublime:
{ // you may set specific environment variables here // e.g &amp;#34;env&amp;#34;: { &amp;#34;PATH&amp;#34;: &amp;#34;$HOME/go/bin:$PATH&amp;#34; } // in values, $PATH and ${PATH} are replaced with // the corresponding environment(PATH) variable, if it exists.</description>
    </item>
    
    <item>
      <title>Sublime text setup with essential tools</title>
      <link>https://vincentserpoul.github.io/post/sublimetext-dev-env-setup/</link>
      <pubDate>Wed, 10 Feb 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/sublimetext-dev-env-setup/</guid>
      <description>Download and install the latest Sublime text Go to the sublime text website and download Sublime text 3 for your OS.
https://www.sublimetext.com/3
Download and install the sublime text package manager Go the package control website, download and install it on your sublime text (follow the instructions on the website).
https://packagecontrol.io/installation
Download and install sublime linter Go to the sublime linter website, download and install it on your sublime text.
http://www.sublimelinter.com/en/latest/installation.html</description>
    </item>
    
  </channel>
</rss>
