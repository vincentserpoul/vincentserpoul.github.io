<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uber on VS tech corner</title>
    <link>https://vincentserpoul.github.io/tags/uber/</link>
    <description>Recent content in uber on VS tech corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Sep 2016 12:06:01 +0800</lastBuildDate><atom:link href="https://vincentserpoul.github.io/tags/uber/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Summary of UBER lessons on scaling microservices</title>
      <link>https://vincentserpoul.github.io/post/on-microservices-and-scaling/</link>
      <pubDate>Fri, 30 Sep 2016 12:06:01 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/on-microservices-and-scaling/</guid>
      <description>I just watched that amazing videos from Matt Ranney
Here are my takeaways and opinionated summary:
 Use RPC for service to service communications: gRPC seems to be a good way of tackling it Use many repositories Profiling should be unified: flamegraphs seem to be a good solution (Go profiling is great too) Premature optimization is bad but performance monitoring is crucial! Trace requests, keep context within all logs Log a lot, but only on a portion of your production architecture as logging can have a big cost.</description>
    </item>
    
  </channel>
</rss>
