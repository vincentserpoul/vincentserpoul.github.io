<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on VS tech corner</title>
    <link>https://vincentserpoul.github.io/post/</link>
    <description>Recent content in Posts on VS tech corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Apr 2017 16:22:00 +0800</lastBuildDate>
    
	<atom:link href="https://vincentserpoul.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bluetooth activation at startup on arch linux</title>
      <link>https://vincentserpoul.github.io/post/archlinux-bluetooth/</link>
      <pubDate>Mon, 03 Apr 2017 16:22:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/archlinux-bluetooth/</guid>
      <description>Why? You might not have reach that point yet but bluez has been deprecating hciconfig and other tools. In bluez 5.44, it&amp;rsquo;s not there anymore.
What is the problem? All hciconfig udev rules to activate bluetooth at startup won&amp;rsquo;t work anymore. Most forum posts solving bluetooth issues are now outdated. Once I updated to bluez 5.44, my service leveraging hciconfig to activate bluetooth at startup didn&amp;rsquo;t work anymore!
What is the solution?</description>
    </item>
    
    <item>
      <title>Golang and Oracle</title>
      <link>https://vincentserpoul.github.io/post/golang-playwithsql-oracle/</link>
      <pubDate>Tue, 27 Dec 2016 00:44:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/golang-playwithsql-oracle/</guid>
      <description>Which library To this day, the most up to date library seems to be rana/ora
How to install (linux &amp;amp; macosx) Download Oracle Instant Client for linux x64: both packages Basic and SDK Unzip each of them in the same folder /opt/oracle
mkdir -p /opt/oracle cd /opt/oracle unzip ~/Downloads/instantclient-basiclite-linux.x64-12.2.0.1.0.zip unzip ~/Downloads/instantclient-sdk-linux.x64-12.2.0.1.0.zip cd /opt/oracle/instantclient_12_1  Add the necessary env variables and paths:
# Oracle export LD_LIBRARY_PATH=/opt/oracle/instantclient_12_2:$LD_LIBRARY_PATH export PKG_CONFIG_PATH=/opt/oracle export ORACLE_HOME=$LD_LIBRARY_PATH  copy from the go package .</description>
    </item>
    
    <item>
      <title>Ethereum react dapps</title>
      <link>https://vincentserpoul.github.io/post/ethereum-react-dapps/</link>
      <pubDate>Thu, 27 Oct 2016 13:34:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-react-dapps/</guid>
      <description>I finished my first dapp with (react-boilerplate)[https://github.com/mxstbr/] this week and here are the few things I learnt. I won&amp;rsquo;t get into the redux, redux-saga details, I let you play with the amazing boilerplate.
Interacting with constant functions Let&amp;rsquo;s use the typical balanceOf function of the EIP20 contracts:
function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; }  Here are the sagas (redux-sagas) I used to interact:
import { take, call, put, cancel, select, fork } from &#39;redux-saga/effects&#39;; import { BALANCE_OF_GET, } from &#39;.</description>
    </item>
    
    <item>
      <title>Ethereum contracts and Golang</title>
      <link>https://vincentserpoul.github.io/post/binding-ethereum-golang/</link>
      <pubDate>Mon, 10 Oct 2016 12:54:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/binding-ethereum-golang/</guid>
      <description>The contract contract Trigger { function () { throw; } address owner; function Trigger() { owner = msg.sender; } event TriggerEvt(address _sender, uint _trigger); function trigger(uint _trigger) { TriggerEvt(msg.sender, _trigger); } function getOwner() constant returns (address) { return owner; } }  This is a very simple contract that we will take as an example.
Getting the right tools for binding A good starting point is this wiki.
You will need to follow the install procedure of go-ethereum.</description>
    </item>
    
    <item>
      <title>Summary of UBER lessons on scaling microservices</title>
      <link>https://vincentserpoul.github.io/post/on-microservices-and-scaling/</link>
      <pubDate>Fri, 30 Sep 2016 12:06:01 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/on-microservices-and-scaling/</guid>
      <description>I just watched that amazing videos from Matt Ranney
 Here are my takeaways and opinionated summary:
 Use RPC for service to service communications: gRPC seems to be a good way of tackling it Use many repositories Profiling should be unified: flamegraphs seem to be a good solution (Go profiling is great too) Premature optimization is bad but performance monitoring is crucial! Trace requests, keep context within all logs Log a lot, but only on a portion of your production architecture as logging can have a big cost.</description>
    </item>
    
    <item>
      <title>Blockchain week in Shanghai!</title>
      <link>https://vincentserpoul.github.io/post/ethereum-solidity/</link>
      <pubDate>Fri, 16 Sep 2016 13:44:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-solidity/</guid>
      <description>I participated to the devcon2 and blockchain summit last week. Here is my summary!</description>
    </item>
    
    <item>
      <title>Ethereum first dapp - part 3</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-3/</link>
      <pubDate>Fri, 12 Aug 2016 12:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-3/</guid>
      <description>setting up a light wallet In order to have a setup close to what the DAPP would be, we will use (metamask) [http://www.metamask.io] as a light wallet (there are other choices).
Metamask allows you to connect to a custom node.
We will then connect to our node, http://localhost:9012 If everthing is fine, metamasks should indicate it&amp;rsquo;s connected.
Then, we can import the metamask account to our local node by simply specifying the datadir we have setup the node data.</description>
    </item>
    
    <item>
      <title>Ethereum first dapp - part 2</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-2/</link>
      <pubDate>Wed, 10 Aug 2016 15:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-2/</guid>
      <description>Frontend Prepare your folder for your dapp I will be using https://github.com/mxstbr/react-boilerplate as it&amp;rsquo;s quite nice and I&amp;rsquo;ve been playing with React for a bit now.
I will not go into the details of setting this up, it&amp;rsquo;s a totally different topic. If you are not familiar with it, it&amp;rsquo;s probably a waste of time for you to read.
Example web3 component with React This boilerplate uses immutable, redux and redux-sagas in order to deal with data.</description>
    </item>
    
    <item>
      <title>Ethereum first dapp - part 1</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-1/</link>
      <pubDate>Mon, 08 Aug 2016 15:00:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-dapp-part-1/</guid>
      <description>Contracts Prepare your folder for your dapp mkdir dapp  inside this folder, we&amp;rsquo;ll create one folder for truffle, one for geth.
cd dapp mkdir truffle geth  inside the geth folder, simply put the customGenesis block you can find in the ethereum-dev-environment blog post.
We are going to use two Ethereum clients, one for tests and devs, testrpc and one for a more real interaction, geth.
Let&amp;rsquo;s install truffle and testrpc</description>
    </item>
    
    <item>
      <title>Interacting with an Ethereum smart contract</title>
      <link>https://vincentserpoul.github.io/post/ethereum-interacting-with-contracts/</link>
      <pubDate>Wed, 03 Aug 2016 20:00:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-interacting-with-contracts/</guid>
      <description>Check the address of the current deployed contract Remember when you mined your contract, it told your its address. Now, reuse it!
eth.getCode(&amp;quot;0x5f3425ccedeae0eb36521c4cf93ec6544dbad9bd&amp;quot;)  Test the contract with a simple interaction get the latest web3-light.min.js js from https://github.com/ethereum/web3.js/releases and simply copy the dist/web3-light.min.js into the same folder as the following HTML file.
then, use this html to interact with your contract on the local node:
&amp;lt;!doctype&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.</description>
    </item>
    
    <item>
      <title>Ethereum first smart contract</title>
      <link>https://vincentserpoul.github.io/post/ethereum-first-contract/</link>
      <pubDate>Wed, 03 Aug 2016 13:00:00 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-first-contract/</guid>
      <description>Launch your geth (or testrpc) private instance ./geth \ --identity &amp;quot;gethTest&amp;quot; \ --rpc --rpcport &amp;quot;9012&amp;quot; \ --rpccorsdomain &amp;quot;YOUR_TEST_DOMAIN_APP_RUN_FROM&amp;quot; \ --datadir &amp;quot;./testChain&amp;quot; \ --port &amp;quot;30303&amp;quot; \ --nodiscover \ --rpcapi &amp;quot;db,eth,net,web3&amp;quot; \ --networkid 1999 \ --dev console  Within the console, compile your contract check this tutorial: https://www.ethereum.org/greeter
I had an issue when I followed the contract tutorial, my contract would not be mined after I was trying to deploy it.</description>
    </item>
    
    <item>
      <title>Ethereum dev environment</title>
      <link>https://vincentserpoul.github.io/post/ethereum-dev-environment/</link>
      <pubDate>Mon, 01 Aug 2016 08:27:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-dev-environment/</guid>
      <description>Part 1 - Setup your ethereum node There are many ways you can setup a node to dev an Ethereum dapp. You can use the live network: not advisable obviously for cost and speed reasons. You can use the test network: not advisable for speed reasons. You can use a testchain set up with Geth: easy but a bit tedious as you need to mine. You can the ethereum testrpc: easiest!</description>
    </item>
    
    <item>
      <title>Kubernetes Singapore Birthday Event</title>
      <link>https://vincentserpoul.github.io/post/kubernetes-talk/</link>
      <pubDate>Thu, 28 Jul 2016 22:27:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/kubernetes-talk/</guid>
      <description>On the 28th, I was invited to talk at Google Singapore for the Kubernetes birthday http://www.meetup.com/fr-FR/GCPUGSG/events/232659329/?eventId=232659329
I spoke about my experience with Kubernetes in production for one of my side projects.
As I like to experiment stuff, I decide to drop power point and use React Spectacle library for my presentation!
here is the result: https://kuberneprez.surge.sh
here is the source code: https://github.com/vincentserpoul/prez-kubernetes
The framework can be found here: http://stack.formidable.com/spectacle/#/?_k=cyx05u
I will do it again!</description>
    </item>
    
    <item>
      <title>learning react</title>
      <link>https://vincentserpoul.github.io/post/learning-react/</link>
      <pubDate>Tue, 12 Apr 2016 12:22:20 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/learning-react/</guid>
      <description>React Nothing beats the facebook React page:
https://facebook.github.io/react/docs/getting-started.html
Redux Nothing beats the redux tutorial:
http://redux.js.org/
And also available on egghead, by Dan Abramov himself:
https://egghead.io/series/getting-started-with-redux
A list of tutorials:
https://github.com/happypoulp/redux-tutorial
A great detailed introduction to your SPA setup http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/
An advanced SPA (still under construction) https://www.gitbook.com/book/tonyhb/redux-without-profanity/details</description>
    </item>
    
    <item>
      <title>react setup with essential tools</title>
      <link>https://vincentserpoul.github.io/post/react-dev-env-setup/</link>
      <pubDate>Mon, 11 Apr 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/react-dev-env-setup/</guid>
      <description>Working with ES6-7 In order to work with ECMAScript 2015 and even with future implementations of ES, you can use Babel.
Babel is a transpiler, it will convert your ES6-7 to plain ES5 javascript that most browsers (&amp;gt;ie9 most probably) will understand.
To install babel
npm install -g babel  Then within your javascript project, you can create a .babelrc file with the following content:
{ &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;, &amp;quot;stage-0&amp;quot;, &amp;quot;react&amp;quot;] }  React and its surrounding libraries After starting using React, I realized it was vey good and was surrounded with libraries which makes it even better: redux, immutable, react-router&amp;hellip;</description>
    </item>
    
    <item>
      <title>javascript dev environment setup</title>
      <link>https://vincentserpoul.github.io/post/javascript-dev-env-setup/</link>
      <pubDate>Thu, 10 Mar 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/javascript-dev-env-setup/</guid>
      <description>NodeJS Go to the nodejs website and install nodejs latest stable version:
https://nodejs.org/en/download/stable/
NPM Go to the npm website and follow the instructions
https://docs.npmjs.com/getting-started/installing-node
Install nodejs essential packages npm install -g eslint webpack webpack-dev-server babel-eslint serve
Install sublime-text essential plugins With the help of the package manager, in sublime-text, install the following packages: babel, Sublime-Linter-Contrib-eslint, React ES6 snippets
Make sure your linter is working In sublime text, open the console (view &amp;gt; show console) and check if there is any error message.</description>
    </item>
    
    <item>
      <title>golang dev environment setup</title>
      <link>https://vincentserpoul.github.io/post/golang-dev-env-setup/</link>
      <pubDate>Sat, 20 Feb 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/golang-dev-env-setup/</guid>
      <description>Golang environment install golang
http://www.wolfe.id.au/2015/03/05/using-sublime-text-for-go-development/
Within sublimetext, from the package manager, install gosublime, install gooracle.
install go/tools:
go get -u golang.org/x/tools/cmd/goimports go get -u golang.org/x/tools/cmd/vet go get -u golang.org/x/tools/cmd/oracle go get -u golang.org/x/tools/cmd/godoc  install gometalinter (https://github.com/alecthomas/gometalinter)
install interfacer (https://github.com/mvdan/interfacer/)
install gosimple (https://github.com/dominikh/go-simple)
install gocov (https://github.com/axw/gocov)
Here is the package settings I use for gosublime:
{ // you may set specific environment variables here // e.g &amp;quot;env&amp;quot;: { &amp;quot;PATH&amp;quot;: &amp;quot;$HOME/go/bin:$PATH&amp;quot; } // in values, $PATH and ${PATH} are replaced with // the corresponding environment(PATH) variable, if it exists.</description>
    </item>
    
    <item>
      <title>Sublime text setup with essential tools</title>
      <link>https://vincentserpoul.github.io/post/sublimetext-dev-env-setup/</link>
      <pubDate>Wed, 10 Feb 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/sublimetext-dev-env-setup/</guid>
      <description>Download and install the latest Sublime text Go to the sublime text website and download Sublime text 3 for your OS.
https://www.sublimetext.com/3
Download and install the sublime text package manager Go the package control website, download and install it on your sublime text (follow the instructions on the website).
https://packagecontrol.io/installation
Download and install sublime linter Go to the sublime linter website, download and install it on your sublime text.</description>
    </item>
    
    <item>
      <title>GIT basic usage</title>
      <link>https://vincentserpoul.github.io/post/git-basic-usage/</link>
      <pubDate>Fri, 20 Feb 2015 08:27:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/git-basic-usage/</guid>
      <description>Git basic commands When you have a new repo git clone git@github.com:vincentserpoul/rbac.git  https or git? the git protocal provides better security and easiness if you are using a correct key.
If you use the git protocol, you can easily associate your private key in the ~/.ssh/config file with the following:
Host github Hostname github.com User vincentserpoul IdentityFile ~/.ssh/myprivatekey IdentitiesOnly yes  When you have a new modification ready for commit git status  You will get an overview of what&amp;rsquo;s new If there is any new files (Untracked files), you will first need to add them:</description>
    </item>
    
  </channel>
</rss>