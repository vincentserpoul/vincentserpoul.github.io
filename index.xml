<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VS tech corner</title>
    <link>https://vincentserpoul.github.io/</link>
    <description>Recent content on VS tech corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Aug 2016 08:27:27 +0800</lastBuildDate>
    <atom:link href="https://vincentserpoul.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ethereum dev environment</title>
      <link>https://vincentserpoul.github.io/post/ethereum-dev-environment/</link>
      <pubDate>Sat, 20 Aug 2016 08:27:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/ethereum-dev-environment/</guid>
      <description>

&lt;h1 id=&#34;part-1-setup-your-ethereum-node:083ea129beec172162d0aa0257f848bc&#34;&gt;Part 1 - Setup your ethereum node&lt;/h1&gt;

&lt;p&gt;There are many ways you can setup a node to dev an Ethereum dapp.
You can use the live network: not advisable obviously for cost and speed reasons.
You can use the test network: not advisable for speed reasons.
You can use a testchain set up with Geth: easy but a bit tedious as you need to mine.
You can the ethereum testrpc: easiest!&lt;/p&gt;

&lt;p&gt;I will talk about the last two setup in this article.&lt;/p&gt;

&lt;h2 id=&#34;using-testrpc:083ea129beec172162d0aa0257f848bc&#34;&gt;Using testrpc&lt;/h2&gt;

&lt;p&gt;Simply install through npm (if you want it globally available, add -g after install, as usual)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install ethereumjs-testrpc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then run it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node_modules/ethereumjs-testrpc/bin/testrpc
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-geth:083ea129beec172162d0aa0257f848bc&#34;&gt;Using geth&lt;/h2&gt;

&lt;p&gt;Download geth latest release (&lt;a href=&#34;https://github.com/ethereum/go-ethereum/releases&#34;&gt;https://github.com/ethereum/go-ethereum/releases&lt;/a&gt;)
and extract it.&lt;/p&gt;

&lt;p&gt;Create a file customGenesis.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;nonce&amp;quot;: &amp;quot;0x0000000000000042&amp;quot;,
  &amp;quot;timestamp&amp;quot;: &amp;quot;0x0&amp;quot;,
  &amp;quot;parentHash&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;,
  &amp;quot;extraData&amp;quot;: &amp;quot;0x0&amp;quot;,
  &amp;quot;gasLimit&amp;quot;: &amp;quot;0x8000000&amp;quot;,
  &amp;quot;difficulty&amp;quot;: &amp;quot;0x400&amp;quot;,
  &amp;quot;mixhash&amp;quot;: &amp;quot;0x0000000000000000000000000000000000000000000000000000000000000000&amp;quot;,
  &amp;quot;coinbase&amp;quot;: &amp;quot;0x3333333333333333333333333333333333333333&amp;quot;,
  &amp;quot;alloc&amp;quot;: {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then init yout node with the genesis block above&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod +x geth
./geth init ./customGenesis.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;run-your-node-with-console-attached:083ea129beec172162d0aa0257f848bc&#34;&gt;Run your node with console attached&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./geth \
    --identity &amp;quot;gethTest&amp;quot; \
    --rpc --rpcport &amp;quot;9012&amp;quot; \
    --rpccorsdomain &amp;quot;YOUR_TEST_DOMAIN_APP_RUN_FROM&amp;quot; \
    --datadir &amp;quot;./testChain&amp;quot; \
    --port &amp;quot;30303&amp;quot; \
    --nodiscover \
    --rpcapi &amp;quot;db,eth,net,web3&amp;quot; \
    --networkid 1999 \
    --dev console
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-base-account:083ea129beec172162d0aa0257f848bc&#34;&gt;Create a base account&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; eth.accounts
[]
&amp;gt; personal.newAccount()
Passphrase:
Repeat passphrase:
&amp;quot;0xedea6958c57fc0cd4bd63b3e7b395393dc76bfb6&amp;quot;
&amp;gt; eth.accounts
[&amp;quot;0xedea6958c57fc0cd4bd63b3e7b395393dc76bfb6&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mine-on-your-newly-created-account:083ea129beec172162d0aa0257f848bc&#34;&gt;Mine on your newly created account&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;miner.setEtherbase(eth.accounts[0])
miner.start(8)
miner.stop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check if the mining worked&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; eth.getBalance(eth.accounts[0]).toNumber();
55000000000000000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the next posts, we will start talking about development of dapps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>learning react</title>
      <link>https://vincentserpoul.github.io/post/learning-react/</link>
      <pubDate>Tue, 12 Apr 2016 12:22:20 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/learning-react/</guid>
      <description>

&lt;h3 id=&#34;react:30bee4de84ade46b3f4515e37a96388a&#34;&gt;React&lt;/h3&gt;

&lt;p&gt;Nothing beats the facebook React page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react/docs/getting-started.html&#34;&gt;https://facebook.github.io/react/docs/getting-started.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;redux:30bee4de84ade46b3f4515e37a96388a&#34;&gt;Redux&lt;/h3&gt;

&lt;p&gt;Nothing beats the redux tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://redux.js.org/&#34;&gt;http://redux.js.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And also available on egghead, by Dan Abramov himself:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://egghead.io/series/getting-started-with-redux&#34;&gt;https://egghead.io/series/getting-started-with-redux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A list of tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/happypoulp/redux-tutorial&#34;&gt;https://github.com/happypoulp/redux-tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;a-great-detailed-introduction-to-your-spa-setup:30bee4de84ade46b3f4515e37a96388a&#34;&gt;A great detailed introduction to your SPA setup&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/&#34;&gt;http://blog.joanboixados.com/building-a-boilerplate-for-a-koa-redux-react-application-including-webpack-mocha-and-sass/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;an-advanced-spa-still-under-construction:30bee4de84ade46b3f4515e37a96388a&#34;&gt;An advanced SPA (still under construction)&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gitbook.com/book/tonyhb/redux-without-profanity/details&#34;&gt;https://www.gitbook.com/book/tonyhb/redux-without-profanity/details&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>react setup with essential tools</title>
      <link>https://vincentserpoul.github.io/post/react-dev-env-setup/</link>
      <pubDate>Mon, 11 Apr 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/react-dev-env-setup/</guid>
      <description>

&lt;h3 id=&#34;working-with-es6-7:83f0229eca70e6ad3111f657bb50d1b7&#34;&gt;Working with ES6-7&lt;/h3&gt;

&lt;p&gt;In order to work with ECMAScript 2015 and even with future implementations of ES, you can use Babel.&lt;/p&gt;

&lt;p&gt;Babel is a transpiler, it will convert your ES6-7 to plain ES5 javascript that most browsers (&amp;gt;ie9 most probably) will understand.&lt;/p&gt;

&lt;p&gt;To install babel&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g babel 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then within your javascript project, you can create a .babelrc file with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;, &amp;quot;stage-0&amp;quot;, &amp;quot;react&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;react-and-its-surrounding-libraries:83f0229eca70e6ad3111f657bb50d1b7&#34;&gt;React and its surrounding libraries&lt;/h3&gt;

&lt;p&gt;After starting using React, I realized it was vey good and was surrounded with libraries which makes it even better: redux, immutable, react-router&amp;hellip;&lt;/p&gt;

&lt;p&gt;I usually try to use these three, for most of the projects I&amp;rsquo;m working on. Sometimes, it feels way too over engineered, but still, once you understand their use, it&amp;rsquo;s pretty straightforward and logical to implement them.&lt;/p&gt;

&lt;p&gt;The most important value added of redux, as well as immutable is the separation of concern. It gives you the power of designing components independantly from eachother.&lt;/p&gt;

&lt;h3 id=&#34;react-and-its-tools:83f0229eca70e6ad3111f657bb50d1b7&#34;&gt;React and its tools&lt;/h3&gt;

&lt;p&gt;In order to help you develop with react and also redux, you have a few tools to help you.&lt;/p&gt;

&lt;h4 id=&#34;eslint-for-react:83f0229eca70e6ad3111f657bb50d1b7&#34;&gt;eslint for react&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;npm install -g eslint-plugin-react
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;sublime-text-plugin:83f0229eca70e6ad3111f657bb50d1b7&#34;&gt;sublime text plugin&lt;/h4&gt;

&lt;p&gt;You can install a useful plugins in react, available in the package installer: React ES6 snippets.&lt;/p&gt;

&lt;h4 id=&#34;eslintrc-file-for-babel-and-react:83f0229eca70e6ad3111f657bb50d1b7&#34;&gt;.eslintrc file for babel and react&lt;/h4&gt;

&lt;p&gt;You can use this eslintrc file as a starting point.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;extends&amp;quot;: &amp;quot;airbnb&amp;quot;,
  &amp;quot;ecmaFeatures&amp;quot;: {
    &amp;quot;jsx&amp;quot;: true,
    &amp;quot;modules&amp;quot;: true
  },
  &amp;quot;env&amp;quot;: {
    &amp;quot;browser&amp;quot;: true,
    &amp;quot;node&amp;quot;: true
  },
  &amp;quot;parser&amp;quot;: &amp;quot;babel-eslint&amp;quot;,
  &amp;quot;rules&amp;quot;: {
    &amp;quot;quotes&amp;quot;: [2, &amp;quot;single&amp;quot;],
    &amp;quot;strict&amp;quot;: [2, &amp;quot;never&amp;quot;],
    &amp;quot;react/jsx-uses-react&amp;quot;: 2,
    &amp;quot;react/jsx-uses-vars&amp;quot;: 2,
    &amp;quot;react/react-in-jsx-scope&amp;quot;: 2,
    &amp;quot;no-console&amp;quot;: 0
  },
  &amp;quot;plugins&amp;quot;: [
    &amp;quot;react&amp;quot;
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;chrome-tools:83f0229eca70e6ad3111f657bb50d1b7&#34;&gt;Chrome tools&lt;/h4&gt;

&lt;p&gt;You can install react devTools in Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi&#34;&gt;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also install redux devTools in chrome too:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd&#34;&gt;https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;redux devTools will require you to modifiy the way you call create store:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;store = (window.devToolsExtension ? window.devToolsExtension()(createStore) : createStore)([...your content here]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will then be able to play with the different state of your app directly in chrome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>javascript dev environment setup</title>
      <link>https://vincentserpoul.github.io/post/javascript-dev-env-setup/</link>
      <pubDate>Thu, 10 Mar 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/javascript-dev-env-setup/</guid>
      <description>

&lt;h3 id=&#34;nodejs:fd4b88456c775c1279613cb81b55c1ee&#34;&gt;NodeJS&lt;/h3&gt;

&lt;p&gt;Go to the nodejs website and install nodejs latest stable version:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/stable/&#34;&gt;https://nodejs.org/en/download/stable/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;npm:fd4b88456c775c1279613cb81b55c1ee&#34;&gt;NPM&lt;/h3&gt;

&lt;p&gt;Go to the npm website and follow the instructions&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.npmjs.com/getting-started/installing-node&#34;&gt;https://docs.npmjs.com/getting-started/installing-node&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;install-nodejs-essential-packages:fd4b88456c775c1279613cb81b55c1ee&#34;&gt;Install nodejs essential packages&lt;/h3&gt;

&lt;p&gt;npm install -g eslint webpack webpack-dev-server babel-eslint serve&lt;/p&gt;

&lt;h3 id=&#34;install-sublime-text-essential-plugins:fd4b88456c775c1279613cb81b55c1ee&#34;&gt;Install sublime-text essential plugins&lt;/h3&gt;

&lt;p&gt;With the help of the package manager, in sublime-text, install the following packages: babel, Sublime-Linter-Contrib-eslint, React ES6 snippets&lt;/p&gt;

&lt;h3 id=&#34;make-sure-your-linter-is-working:fd4b88456c775c1279613cb81b55c1ee&#34;&gt;Make sure your linter is working&lt;/h3&gt;

&lt;p&gt;In sublime text, open the console (view &amp;gt; show console) and check if there is any error message.&lt;/p&gt;

&lt;p&gt;Alright, let&amp;rsquo;s check if everything is fine. Let&amp;rsquo;s create a test project in a new folder.&lt;/p&gt;

&lt;p&gt;Add a .eslintrc file, with this content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;extends&amp;quot;: &amp;quot;airbnb&amp;quot;,
  &amp;quot;ecmaFeatures&amp;quot;: {
    &amp;quot;jsx&amp;quot;: true,
    &amp;quot;modules&amp;quot;: true
  },
  &amp;quot;env&amp;quot;: {
    &amp;quot;browser&amp;quot;: true,
    &amp;quot;node&amp;quot;: true
  },
  &amp;quot;parser&amp;quot;: &amp;quot;babel-eslint&amp;quot;,
  &amp;quot;rules&amp;quot;: {
    &amp;quot;quotes&amp;quot;: [2, &amp;quot;single&amp;quot;],
    &amp;quot;strict&amp;quot;: [2, &amp;quot;never&amp;quot;]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then create a simple test.js with this content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;test&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the linter complaining, telling you something is wrong and you need to correct your javascript (check the lower grey line of sublime for the comment).&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t see anything, check the console again.&lt;/p&gt;

&lt;p&gt;Last resort, if things are still not working, you can go there and troubleshoot: &lt;a href=&#34;http://www.sublimelinter.com/en/latest/troubleshooting.html&#34;&gt;http://www.sublimelinter.com/en/latest/troubleshooting.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>golang dev environment setup</title>
      <link>https://vincentserpoul.github.io/post/golang-dev-env-setup/</link>
      <pubDate>Sat, 20 Feb 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/golang-dev-env-setup/</guid>
      <description>

&lt;h3 id=&#34;golang-environment:5968a8b0c74379a526ed74fea62d73ec&#34;&gt;Golang environment&lt;/h3&gt;

&lt;p&gt;install golang&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.wolfe.id.au/2015/03/05/using-sublime-text-for-go-development/&#34;&gt;http://www.wolfe.id.au/2015/03/05/using-sublime-text-for-go-development/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within &lt;a href=&#34;https://vincentserpoul.github.io/sublimetext-dev-environment&#34;&gt;sublimetext, from the package manager&lt;/a&gt;, install gosublime, install gooracle.&lt;/p&gt;

&lt;p&gt;install go/tools:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u golang.org/x/tools/cmd/goimports
go get -u golang.org/x/tools/cmd/vet
go get -u golang.org/x/tools/cmd/oracle
go get -u golang.org/x/tools/cmd/godoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;install gometalinter (&lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34;&gt;https://github.com/alecthomas/gometalinter&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;install interfacer (&lt;a href=&#34;https://github.com/mvdan/interfacer/&#34;&gt;https://github.com/mvdan/interfacer/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;install gosimple (&lt;a href=&#34;https://github.com/dominikh/go-simple&#34;&gt;https://github.com/dominikh/go-simple&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;install gocov (&lt;a href=&#34;https://github.com/axw/gocov&#34;&gt;https://github.com/axw/gocov&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Here is the package settings I use for gosublime:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{

    // you may set specific environment variables here
    // e.g &amp;quot;env&amp;quot;: { &amp;quot;PATH&amp;quot;: &amp;quot;$HOME/go/bin:$PATH&amp;quot; }
    // in values, $PATH and ${PATH} are replaced with
    // the corresponding environment(PATH) variable, if it exists.
    &amp;quot;env&amp;quot;: {&amp;quot;GOPATH&amp;quot;: &amp;quot;/home/go&amp;quot; },

    &amp;quot;fmt_cmd&amp;quot;: [&amp;quot;goimports&amp;quot;],
    &amp;quot;ipc_timeout&amp;quot;: 5,

    // enable comp-lint, this will effectively disable the live linter
    &amp;quot;comp_lint_enabled&amp;quot;: true,

    // list of commands to run
    &amp;quot;comp_lint_commands&amp;quot;: [
        // run `golint` on all files in the package
        // &amp;quot;shell&amp;quot;:true is required in order to run the command through your shell (to expand `*.go`)
        // also see: the documentation for the `shell` setting in the default settings file ctrl+dot,ctrl+4
        {&amp;quot;cmd&amp;quot;: [&amp;quot;golint *.go&amp;quot;], &amp;quot;shell&amp;quot;: true},

        // run go vet on the package
        {&amp;quot;cmd&amp;quot;: [&amp;quot;go&amp;quot;, &amp;quot;vet&amp;quot;]},

        // run `go install` on the package. GOBIN is set,
        // so `main` packages shouldn&#39;t result in the installation of a binary
        {&amp;quot;cmd&amp;quot;: [&amp;quot;go&amp;quot;, &amp;quot;install&amp;quot;]}
    ],

    &amp;quot;on_save&amp;quot;: [
        // run comp-lint when you save,
        // naturally, you can also bind this command `gs_comp_lint`
        // to a key binding if you want
        {&amp;quot;cmd&amp;quot;: &amp;quot;gs_comp_lint&amp;quot;}
    ]
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Sublime text setup with essential tools</title>
      <link>https://vincentserpoul.github.io/post/sublimetext-dev-env-setup/</link>
      <pubDate>Wed, 10 Feb 2016 20:48:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/sublimetext-dev-env-setup/</guid>
      <description>

&lt;h3 id=&#34;download-and-install-the-latest-sublime-text:f3532878df49fcb6e169c354b4fe59d3&#34;&gt;Download and install the latest Sublime text&lt;/h3&gt;

&lt;p&gt;Go to the sublime text website and download Sublime text 3 for your OS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sublimetext.com/3&#34;&gt;https://www.sublimetext.com/3&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;download-and-install-the-sublime-text-package-manager:f3532878df49fcb6e169c354b4fe59d3&#34;&gt;Download and install the sublime text package manager&lt;/h3&gt;

&lt;p&gt;Go the package control website, download and install it on your sublime text (follow the instructions on the website).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://packagecontrol.io/installation&#34;&gt;https://packagecontrol.io/installation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;download-and-install-sublime-linter:f3532878df49fcb6e169c354b4fe59d3&#34;&gt;Download and install sublime linter&lt;/h3&gt;

&lt;p&gt;Go to the sublime linter website, download and install it on your sublime text.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.sublimelinter.com/en/latest/installation.html&#34;&gt;http://www.sublimelinter.com/en/latest/installation.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;download-and-install-prettyjson:f3532878df49fcb6e169c354b4fe59d3&#34;&gt;Download and install prettyJSON&lt;/h3&gt;

&lt;p&gt;JSON format is pretty common these days, try this prettifier, it will save you some time when you get long string of JSON.&lt;/p&gt;

&lt;p&gt;You can install it from the sublime text package manager.&lt;/p&gt;

&lt;h3 id=&#34;finally:f3532878df49fcb6e169c354b4fe59d3&#34;&gt;Finally&lt;/h3&gt;

&lt;p&gt;You are ready to go wrestle with your favorite language!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GIT basic usage</title>
      <link>https://vincentserpoul.github.io/post/git-basic-usage/</link>
      <pubDate>Fri, 20 Feb 2015 08:27:27 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/post/git-basic-usage/</guid>
      <description>

&lt;h3 id=&#34;git-basic-commands:9b7daffe836baef8e726595ca41fde03&#34;&gt;Git basic commands&lt;/h3&gt;

&lt;h4 id=&#34;when-you-have-a-new-repo:9b7daffe836baef8e726595ca41fde03&#34;&gt;When you have a new repo&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    git clone git@github.com:vincentserpoul/rbac.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;https or git? the git protocal provides better security and easiness if you are using a correct key.&lt;/p&gt;

&lt;p&gt;If you use the git protocol, you can easily associate your private key in the ~/.ssh/config file with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host github
    Hostname github.com
    User vincentserpoul
    IdentityFile ~/.ssh/myprivatekey
    IdentitiesOnly yes
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;when-you-have-a-new-modification-ready-for-commit:9b7daffe836baef8e726595ca41fde03&#34;&gt;When you have a new modification ready for commit&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You will get an overview of what&amp;rsquo;s new
If there is any new files (Untracked files), you will first need to add them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add mynewfile.ext
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will give you the list of the files you are about to commit (Changes not staged for commit).
You can then commit all the files or the selected ones.
Group the commits by functionalities and follow &lt;a href=&#34;http://chris.beams.io/posts/git-commit/&#34;&gt;this&lt;/a&gt; to write your commit message properly (TL;DR: use imperative for the verb - no ing - and keep it short for the subject line, 50 chars)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit -m &amp;quot;add feature A&amp;quot; -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you reached that, you will need to first sync with the remote repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch origin master
git rebase origin/master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will first get all the commits in the remote repo (supposingly called origin), replay all the commits that have been pushed there and replay yours above them.
If there are any issues, you will have to resolve them.
Modify the problematic file and then:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add problematicfile.ext
git rebase --continue
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should be all good right now.
Let&amp;rsquo;s look at our branching strategy.&lt;/p&gt;

&lt;h3 id=&#34;git-common-flow:9b7daffe836baef8e726595ca41fde03&#34;&gt;Git common flow&lt;/h3&gt;

&lt;p&gt;Nothing fancy here:
&lt;img src=&#34;http://nvie.com/img/git-model@2x.png&#34; alt=&#34;gitflow&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://vincentserpoul.github.io/about/</link>
      <pubDate>Fri, 09 Jan 2015 14:46:46 +0800</pubDate>
      
      <guid>https://vincentserpoul.github.io/about/</guid>
      <description>&lt;p&gt;Try out for Hugo!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>